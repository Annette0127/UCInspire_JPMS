import os

dot_file = "[TODO]"  # Dependency file generated by "jdeps"
project_path = "[TODO]"
project_name = "ballerina-lang-1.2.18/"
f_err = open("[TODO]", "w")  # Error log file
f_out = open("[TODO]", "w")  # Entity with full path
find_condition_pattern = "(ballerina-lang-1.2.18.jar)"

cache = dict()


def find(name):
    file_list = list()
    for root, dirs, files in os.walk(project_path):
        for f in files:
            full_path = os.path.join(str(root), str(f))
            if (full_path).__contains__(name + ".java"):
                if not full_path.__contains__(".class"):
                    if open(full_path):
                        file_list.append(full_path.split(project_name)[1].split(".java")[0])
    return file_list


def update_cache(entity, cls):
    if entity not in cache.keys():
        file_list = find(entity.replace(".", "/"))
        if len(file_list) == 1:
            cache[entity] = file_list[0].replace("/", ".")
        elif len(file_list) == 0:
            cache[entity] = entity
        else:
            new_list = list()
            for i in file_list:
                if not i.__contains__("-old") and not i.__contains__("-milestone") \
                        and not i.__contains__("jballerina-bstring-unit-test"):
                    new_list.append(i)
            if len(new_list) == 1:
                cache[entity] = new_list[0].replace("/", ".")
            else:
                f_err.write("[ " + str(cls) + " ]\n")
                for a in file_list:
                    f_err.write(a + "\n")
                f_err.write("\n")


if __name__ == '__main__':
    cnt = 0
    with open(dot_file) as f:
        for l in f:
            ls = l.strip()
            if not ls.startswith("\""):
                continue
            ar = ls.split()
            from_entity = ar[0].strip()[1:-1].strip()
            to_entity = ar[2].strip()[1:]

            cnt += 1
            if cnt % 100 == 0:
                print(cnt)

            cls_main = l.strip()
            update_cache(from_entity, cls_main)
            if ar[3].strip()[:-2] == find_condition_pattern:
                update_cache(to_entity, cls_main)
            else:
                cache[to_entity] = to_entity

            if cache.keys().__contains__(from_entity) and cache.keys().__contains__(to_entity):
                f_out.write("depends" + " " + cache[from_entity] + " " + cache[to_entity] + "\n")
